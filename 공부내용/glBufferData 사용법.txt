-. GL_STATIC_DRAW
데이터가 한 번 설정되고, 거의 변하지 않을 때 사용한다.
주로 정적인 데이터로 사용한다.
ex) 정적 메쉬나 렌더링 시 반복적으로 사용할 정점 데이터에 적합하다.
고정된 배경이나 맵 메쉬 같은 변하지 않는 오브젝트 데이터를 처리할 때 사용하면 좋다.

-. GL_DYNAMIC_DRAW
데이터가 자주 변경되고, 드로우 호출에서 자주 읽히는 경우에 사용한다.
데이터가 빈번히 수정되는 경우에 사용한다.
ex) 애니메이션 또는 실시간으로 변화하는 버텍스 데이터를 사용할 때 효율적이다.
캐릭터 애니메이션에서 정점 데이털르 자주 수정할 때 사용한다. 캐릭터가 달리거나 점프할 때마다 정점 위치가 변경될 수 있으니까.

-. GL_STREAM_DRAW
데이터가 한번만 설정되고, 드로우 호출 이루 거의 사용되지 않을 때 적합하다.
일반적으로 단발성 데이터를 다룰때 사용한다.
ex) 매 프레임마다 새로운 데이터를 올리는 경우 유용하다.
파티클 시스템처럼 매 프레임마다 새로운 위치나 상태가 생성되는 경우에 적합하다.
매 프레임마다 정점 데이터를 완전히 새로 계산하고 업데이트 해야되니까.

-. GL_STATIC_READ
데이터를 GPU에서 읽기 위해 사용되며, 거의 변경되지 않는 데이터를 읽기 전용으로 GPU에 저장할때 적합하다.
ex) 복잡한 라이팅 효과나 그림자 맵 데이터를 저장할 때 사용한다.

-. GL_DYNAMIC_READ
데이터가 자주 변경되며, GPU가 읽기 목적으로 접근하는 경우에 사용된다.
ex) 읽기 전용으로 CPU와 GPU가 메모리를 공유할 때 적합하다.
실시간으로 변하는 게임 상태에 따라 조정되는 텍스처 데이터를 읽을 때 유용하다.
미니맵의 위치가 실시간으로 업데이트 될 때 사용하면 좋을 듯 하다.

-. GL_STREAM_READ
드로우 이후 한 번만 읽는 데이터에 사용되며, 단발성 데이터를 읽기 용도로 GPU 메모리에 저장할 때 적합하다.
프레임이 끝나면 폐기될 데이터를 GPU가 빠르게 읽을때 유용하다. 
ex) 한번 읽은 후 사라지는 특수 이펙트나 짧은 애니메이션 프레임에 유용하다.

-. GL_STATIC_COPY
데이터를 GPU가 CPU로 복사하거나 CPU가 읽기 위해 저장할 때 사용한다.
ex) GPU간 데이터 전송 시 사용된다.
렌더링한 텍스처 데이터를 다른 텍스처로 복사할 때 사용한다.
여러 텍스처 맵을 한 번에 복사할 필요가 있을때 사용하면 효율적이다.

-. GL_DYNAMIC_COPY
자주 변경되는 데이터를 CPU로 복사할 때 적합하다.
물리 엔진 데이터를 GPU에서 CPU로 주기적으로 전송할 때 유용하다. 물체의 위치와 상태가 자주변경되지만 CPU가 읽기 위해 필요한경우 적합하다.

-. GL_STREAM_COPY
단발성 데이터 전송에서 GPU간 복사가 필요할 때 사용된다.
임시 렌더 타겟을 처리할 때 GPU메모리를 사용하여 데이터를 복사한 후 폐기할 때 사용한다.
ex) 특수 효과 렌더링 시 임시 텍스처로 데이터를 복사한 후 바로 폐기 할 때 유용하다.
